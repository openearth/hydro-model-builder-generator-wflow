##################### INPUT INFO #####################

[inputmapstacks]
# Define the forcing needed for the model here
# The filename is either the name of the pcraster mapstack 
# or the name of the variable in the netcdf input file
Precipitation		= /inmaps/Rainfall/MSWEPr
#EvapoTranspiration	= /inmaps/PET
#Temperature		= /inmaps/TEMP
# Optional inflow (positive) or outflow (negative) of the kin-wave reservoir
#Inflow			= /inmaps/IF

[modelparameters]
# Format:
# name=stack,type,default
# - name - Name of the parameter (internal variable)
# - stack - Name of the mapstack (representation on disk or in mem) relative to case
# - type - Type of parameter (default = static)
# - default - Default value if map/tbl is not present
# Possible types are::
# - staticmap: Read at startup from map 
# - statictbl: Read at startup from tbl
# - timeseries: read map for each timestep
# - monthlyclim: read a map corresponding to the current month (12 maps in total)
# - dailyclim: read a map corresponding to the current day of the year
# - hourlyclim: read a map corresponding to the current hour of the day (24 in total) (not implemented yet)
# Example:
# RootingDepth=monthlyclim/ROOT,monthyclim,100,1

# The parameters defined below are needed to derive canopy parameters from LAI and land-cover
Sl	= intbl/LCtoSpecificLeafStorage.tbl,tbl,0.5,1,staticmaps/wflow_landuse.map
Kext	= intbl/LCtoExtinctionCoefficient.tbl,tbl,0.5,1,staticmaps/wflow_landuse.map
Swood	= intbl/LCtoBranchTrunkStorage.tbl,tbl,0.5,1,staticmaps/wflow_landuse.map
LAI	= staticmaps/clim/LAI,monthlyclim,1.0,1

[run]
# Either a runinfo file or a start- and endtime are required
#runinfo	= runinfo.xml
starttime	= 2010-01-01 00:00:00
endtime		= 2010-03-01 00:00:00
# Required, base timestep of the model
timestepsecs 	= 86400
# Start model with cold state
reinit		= 1
#skipfirst	= 1
#runlengthdetermination	= intervals
runlengthdetermination	= steps

[model]
# Model parameters and settings, to be updated from the catchment data
modeltype	= wflow_sbm
AnnualDischarge	= 2290
# Alpha for river-width estimation (5 for mountain stream, 60 for the river Rhine)
Alpha		= 120
ModelSnow	= 0
ScalarInput	= 0
InterpolationMethod = inv
WIMaxScale	= 0.8
Tslice		= 1
# Maximum upstream distance to update the flow in metres
UpdMaxDist	= 300000.0
#SubCatchFlowOnly  = 1
origTopogLateral   = 1
#DynamicVegetation = 1

[framework]
# Outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab

# NetCDF output requires also outputformat = 1 (default) and additionally the name of the file
outputformat	= 1
debug		= 0
#netcdfinput		= inmaps.nc
netcdfoutput		= outmaps.nc
#netcdfstatesinput	= instates.nc
#netcdfstatesoutput	= states.nc
#netcdfstaticinput	= staticmaps.nc
#netcdfstaticoutput	= outsum.nc
netcdf_format			= NETCDF4
#netcdf_format			= NETCDF3_CLASSIC
EPSG				= EPSG:4326
netcdf_zlib			= True
netcdfwritebuffer		= 100
netcdf_least_significant_digit	= 2

[layout]
# If set to zero the cell-size is given in lat/lon (the default)
sizeinmetres = 0


##################### OUTPUT INFO #####################

##### Output grids #####

[outputmaps]
self.Precipitation=P
self.PotenEvap=PET
self.Temperature=TEMP
#self.ActEvap=AET
#self.Transpiration=transp
self.SurfaceRunoff=run
#self.Inflow=iflow
#self.SubCellFrac=scf
#self.Inwater=inw
#self.DistToUpdPt=dist
#self.Snow=sno
#self.SnowMelt=snomlt
#self.FirstZoneFlux=fzf
#self.TopoLdd=ldd
#self.InwaterMM=iwm
#self.watbal=wat
#self.TSoil=soiltemp

[summary_sum]
self.Precipitation=precip_sum.map

[summary_max]
self.Precipitation=precip_max.map
self.Temperature=temp_max.map

[summary_min]
self.Temperature=temp_min.map

[summary_avg]
self.Precipitation=precip_avg.map


##### Output timeseries #####

[outputcsv_0]
# Save and sample these at the gauge locations
samplemap=staticmaps/wflow_gauges.map
self.SurfaceRunoff=run.csv
self.WaterLevel=lev.csv  

[outputcsv_1]
# Save and average these per subcatchment
samplemap=staticmaps/wflow_subcatch.map
self.Precipitation=prec_subcatch.csv
self.Transfer=tra_subcatch.csv

[outputcsv_2]
# Save and average these per land use type
samplemap=staticmaps/wflow_landuse.map
self.PotenEvap=pet_lu.csv
self.ActEvap=aet_lu.csv

[outputtss_0]
# Save and sample these at the gauge locations
samplemap=staticmaps/wflow_gauges.map
self.SurfaceRunoff=run.tss
self.WaterLevel=lev.tss
